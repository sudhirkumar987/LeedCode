class Solution {
    public int longestSubstring(String s, int k) {
    //     int maxLength=0;
    //     for(int i=0; i<s.length(); i++){
    //         int ans=0;
    //         for(int j=i+1; j<=s.length(); j++){
    //             String subStr=s.substring(i,j);
    //             if(longSubStr(subStr,k)){
    //                 ans=subStr.length();
    //                 maxLength=Math.max(ans,maxLength);
    //             }
    //         }
    //     }
    //     return maxLength;
    // }

    // public boolean longSubStr(String str, int k){
    //     char [] freq = new char[26];
    //     for(int i=0; i<str.length(); i++){
    //         char ch = str.charAt(i);
    //         freq[ch-'a']++;
    //     }

    //     //check substring with AtLeast k repeating character 
    //     for(int i=0; i<freq.length; i++){
    //         if(freq[i] > 0 && freq[i] < k) {
    //             return false;
    //         }
    //     }
    //     return true;

        int [] freq = new int[26];
        char [] ch = s.toCharArray();
        for(int i=0; i<ch.length; i++){
            int index = ch[i]-'a';
            freq[index]++;
        }

        int left=0;
        int maxLen=0;
        boolean valid = true;
        for(int right=0; right<s.length(); right++){
            if(freq[ch[right]-'a']>0 && freq[ch[right]-'a']<k){
                String subString=s.substring(left,right);
                maxLen = Math.max(maxLen, longestSubstring(subString, k));
                left = right + 1;
                valid = false;
            }
        }
        if (valid) {
            return s.length();
        } else {
            return Math.max(maxLen, longestSubstring(s.substring(left), k));
        }

    }
}
