/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    ListNode current;
    public int findSize(ListNode head){
        int count=0;
        ListNode temp = head;
        while(temp!=null){
            count++;
            temp = temp.next;
        }
        return count;
    }
    public TreeNode sortedListToBST(ListNode head) {
        int size = findSize(head);
        current = head;
        return findBst(0,size-1);
    }
    public TreeNode findBst(int stIdx, int endIdx){
        if(stIdx > endIdx){
            return null;
        }
        int mid = stIdx+(endIdx-stIdx)/2;
        TreeNode left=findBst(stIdx,mid-1);
        TreeNode bst=new TreeNode(current.val);
        bst.left = left;
        current = current.next;
        bst.right=findBst(mid+1,endIdx);
        return bst;
    }
}
