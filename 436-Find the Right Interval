class Solution {
    public int[] findRightInterval(int[][] intervals) {
        //Brute force approach (Time Complexity - 0(n^2))

        // int [] newArray = new int[intervals.length];

        // for(int i=0; i<intervals.length; i++){
        //     int index = -1;
        //     int min = Integer.MAX_VALUE;
        //     for(int j=0; j<intervals.length; j++){
        //         if(intervals[j][0] >= intervals[i][1] && intervals[j][0]<min){
        //             index = j;
        //             min = intervals[j][0];
        //         }
        //         newArray[i]= index;
        //     }

        // }
        // return newArray;
        int n = intervals.length;
        int[] result = new int[n];

    
        int[][] sorted = new int[n][2];
        for (int i = 0; i < n; i++) {
            sorted[i] = new int[]{intervals[i][0], i};
        }
        Arrays.sort(sorted, (a, b) -> a[0] - b[0]);

        for (int i = 0; i < n; i++) {
            int end = intervals[i][1];
            int left = 0, right = n - 1, index = -1;

            while (left <= right) {
                int mid = (left + right) / 2;
                if (sorted[mid][0] >= end) {
                    index = sorted[mid][1];
                    right = mid - 1; 
                } else {
                    left = mid + 1; 
                }
            }
            result[i] = index; 
        }
        return result;
    }
}
